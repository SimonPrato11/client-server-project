from cryptography.fernet import Fernet


def generate_key():
    """
    Generate a secret key for symmetric encryption using the Fernet scheme.

    Returns:
        bytes: A URL-safe base64-encoded 32-byte key.
    """
    return Fernet.generate_key()


def encrypt_message(message, key):
    """
    Encrypt a message using a Fernet key.

    Args:
        message (str): The plaintext message to encrypt.
        key (bytes): The Fernet key used to encrypt the message, should be generated by `generate_key`.

    Returns:
        bytes: The encrypted message, which is URL-safe base64-encoded.
    """
    f = Fernet(key)
    return f.encrypt(message.encode())


def decrypt_message(encrypted_message, key):
    """
    Decrypt a message encrypted with Fernet symmetric encryption.

    Args:
        encrypted_message (bytes): The encrypted message to decrypt.
        key (bytes): The Fernet key used for decryption, should match the encryption key.

    Returns:
        str: The decrypted plaintext message.
    """
    f = Fernet(key)
    return f.decrypt(encrypted_message).decode()
